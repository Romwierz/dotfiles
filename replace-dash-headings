#!/bin/bash
#
# Replace leading "- " with "\- " in a line that follows a non-empty line that ends with two spaces
# Usage: replace-dash-headings FILES... or via stdin

# -e: exit on error
# -u: unset variables
# -o pipefail: exit if any command in a pipe fails
set -euo pipefail

FILES=()
DRY_RUN=false

# Extract --dry-run if present
for arg in "$@"; do
    if [[ "$arg" == "--dry-run" ]]; then
        DRY_RUN=true
    else
        # Append positional arguments
        FILES+=("$arg")
    fi
done

# Read files from stdin if piped
# -t stands for file descriptor FD, 0 is terminal
# So if FD is terminal than data IS NOT piped
if ! [ -t 0 ]; then
    while IFS= read -r line; do
        FILES+=("$line")
    done
fi

if [[ "${#FILES[@]}" -eq 0 ]]; then
    echo "Error: No input files provided."
    echo "Usage: replace-dash-headings <file1> [file2 ...] or via stdin"
    exit 1
fi


if $DRY_RUN; then
    echo "[DRY RUN] No files will be modified."
fi
echo "Replacing leading '- ' with '\\- '..."
echo "See script for details."
echo ""

echo "[DRY RUN]"
echo ""

for FILE in "${FILES[@]}"; do

    if [[ ! -f "$FILE" ]]; then
        echo "Skipping: '$FILE' (not a file)"
        continue
    fi

    # Create backup if it doesn't exist already
    if [[ ! -f "$FILE.bak" && $DRY_RUN == false ]]; then
        cp -- "$FILE" "$FILE.bak"
    fi

    TMP_FILE=$(mktemp)

    LINECOUNT_BEFORE=$(wc -l < "$FILE")

    awk '
    NR == 1 {
        prev = $0
        print prev
        next
    }
    {
        if ($0 ~ /^[[:space:]]*- / && prev ~ /[^[:space:]]  $/) {
            sub(/^[[:space:]]*- /, "\\- ")
        }
        print
        prev = $0
    }' "$FILE" > "$TMP_FILE"

    LINECOUNT_AFTER=$(wc -l < "$TMP_FILE")

    if cmp -s "$FILE" "$TMP_FILE"; then
        echo "No changes: $FILE"
        echo ""
        rm -- "$TMP_FILE"
    else
        if $DRY_RUN; then
            echo "Would update: $FILE"
            rm -- "$TMP_FILE"
        else
            mv -- "$TMP_FILE" "$FILE"
            echo "Updated: $FILE"
        fi

        if [[ "$LINECOUNT_BEFORE" -ne "$LINECOUNT_AFTER" ]]; then
            echo "WARNING: Line count changed in $FILE (before: $LINECOUNT_BEFORE, after: $LINECOUNT_AFTER)"
        fi

        echo ""
    fi

done
